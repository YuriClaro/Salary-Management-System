services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: salary_project
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
    ports:
      - "5432:5432"
    volumes:
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - microservices-net

  salary-api:
    image: salary_api
    container_name: salary_api
    build:
      context: ./salary_api
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/salary_project
      SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA: schema_salary
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 1234
    depends_on:
      - postgres
    networks:
      - microservices-net

  authentication-api:
    image: authentication_api
    container_name: authentication_api
    build:
      context: ./authentication_api
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/salary_project
      SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA: schema_authentication
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 1234
    depends_on:
      - postgres
    networks:
      - microservices-net

  email-api:
    image: email_api
    container_name: email_api
    build:
      context: ./email_api
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/salary_project
      SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA: schema_email
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 1234
    depends_on:
      - postgres
    networks:
      - microservices-net

  portal-api:
    image: portal_api
    container_name: portal_api
    build:
      context: ./portal_api
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - salary-api
      - authentication-api
      - email-api
    networks:
      - microservices-net

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - microservices-net

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
    networks:
      - microservices-net

  kafdrop:
    image: obsidiandynamics/kafdrop
    depends_on:
      - kafka
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
      JVM_OPTS: "-Xms32M -Xmx64M"
    networks:
      - microservices-net

networks:
  microservices-net:
    driver: bridge
